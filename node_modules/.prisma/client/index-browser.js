
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.0.0
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "4.0.0",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  type: 'type',
  subtype: 'subtype',
  description: 'description',
  memory: 'memory',
  imageUrl: 'imageUrl',
  price: 'price',
  availability: 'availability',
  priceForTwo: 'priceForTwo',
  updateTimes: 'updateTimes'
});

exports.Prisma.AppetizerScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  imageURL: 'imageURL',
  price: 'price',
  availability: 'availability',
  updateTimes: 'updateTimes'
});

exports.Prisma.SaladScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  subtype: 'subtype',
  description: 'description',
  imageURL: 'imageURL',
  price: 'price',
  availability: 'availability',
  updateTimes: 'updateTimes'
});

exports.Prisma.MainDisheScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  subtype: 'subtype',
  description: 'description',
  imageURL: 'imageURL',
  price: 'price',
  priceForTwo: 'priceForTwo',
  availability: 'availability',
  updateTimes: 'updateTimes'
});

exports.Prisma.DrinkScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  subtype: 'subtype',
  imageURL: 'imageURL',
  description: 'description',
  price: 'price',
  availability: 'availability',
  updateTimes: 'updateTimes'
});

exports.Prisma.DessertScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  imageURL: 'imageURL',
  price: 'price',
  availability: 'availability',
  updateTimes: 'updateTimes'
});

exports.Prisma.ExtraPortionScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  price: 'price',
  availability: 'availability'
});

exports.Prisma.PetsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  availability: 'availability'
});

exports.Prisma.WineScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  glassPrice: 'glassPrice',
  bottlePrice: 'bottlePrice',
  imageUrl: 'imageUrl',
  country: 'country',
  availability: 'availability',
  updateTimes: 'updateTimes'
});

exports.Prisma.AdminScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  password: 'password',
  accountType: 'accountType'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  Product: 'Product',
  Appetizer: 'Appetizer',
  Salad: 'Salad',
  MainDishe: 'MainDishe',
  Drink: 'Drink',
  Dessert: 'Dessert',
  ExtraPortion: 'ExtraPortion',
  Pets: 'Pets',
  Wine: 'Wine',
  Admin: 'Admin'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
